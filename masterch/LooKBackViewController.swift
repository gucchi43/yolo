//
//  LooKBackViewController.swift
//  masterch
//
//  Created by HIroki Taniguti on 2016/09/30.
//  Copyright ¬© 2016Âπ¥ Fumiya Yamanaka. All rights reserved.
//

import UIKit
import NCMB
import SwiftDate
import DZNEmptyDataSet
import TTTAttributedLabel
import SDWebImage

class LooKBackViewController: UIViewController, addPostDetailDelegate {
    
    @IBOutlet weak var segment: UISegmentedControl!
    @IBOutlet weak var tableView: UITableView!
    
    var posts: NSArray = NSArray()
    var dayLoadingToggle = false
    
    let likeOnImage = UIImage(named: "hartON")
    let likeOffImage = UIImage(named: "hartOFF")

    //    „Çª„É´ÈÅ∏ÊäûÊôÇ„ÅÆÂ§âÊï∞
    var selectedPostObject: NCMBObject!
    var selectedPostImage: UIImage?
    
    override func viewDidLoad() {
        posts = []
        segment.tintColor = ColorManager.sharedSingleton.mainColor()
        tableView.estimatedRowHeight = 370
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.emptyDataSetSource = self
        tableView.emptyDataSetDelegate = self
        self.tableView.tableFooterView =  UIView()

        tableView.sectionHeaderHeight = 50

        resetAndLoading()
        loadQuery()
    }
    
    //tableView„Å´Ë°®Á§∫„Åô„Çã„Åù„ÅÆÊó•„ÅÆÊäïÁ®ø„ÇíQuery„Åã„ÇâÂèñ„Å£„Å¶„Åè„Çã
    func loadQuery(){
        var query: NCMBQuery = NCMBQuery()
        let queryManager = LookBackQueryManager()
        switch segment.selectedSegmentIndex {
        case 0:
            query = queryManager.getOneWeekAgoQuery()
            break
            
        case 1:
            query = queryManager.getOneMonthAgoQuery()
            break
            
        case 2:
            query = queryManager.getOneYearAgoQuery()
            break
            
        default:
            break
        }

        query.findObjectsInBackgroundWithBlock({(objects, error) in
            if let error = error {
                self.dayLoadingToggle = false
                print(error.localizedDescription)
            } else {
                self.dayLoadingToggle = false
                if objects.count > 0 {
                    print("„Åù„ÅÆÊó•„Å´ÊäïÁ®ø„Åå„ÅÇ„Çã„Éë„Çø„Éº„É≥")
                    print("ÊäïÁ®øÊï∞", objects.count)
                    self.posts = objects
                    self.tableView.emptyDataSetSource = nil
                    self.tableView.emptyDataSetDelegate = nil
                } else {
                    print("„Åù„ÅÆÊó•„Å´ÊäïÁ®ø„Åå„Å™„ÅÑ„Éë„Çø„Éº„É≥")
                    self.posts = []
                    self.tableView.emptyDataSetSource = self
                    self.tableView.emptyDataSetDelegate = self
                }
                self.tableView.reloadData()
            }
        })
    }

    func resetAndLoading() {
        if posts == [] {
            print("emptyÁä∂ÊÖã„Å†„Å£„ÅüÊôÇ")
        }else {
            print("reset tableView position")
            let indexPath = NSIndexPath(forRow: 0, inSection: 0)
            tableView.scrollToRowAtIndexPath(indexPath, atScrollPosition: UITableViewScrollPosition.Top, animated: false)
        }
        dayLoadingToggle = true
        posts = []
        tableView.emptyDataSetSource = self
        tableView.emptyDataSetDelegate = self
        tableView.reloadData()
    }

    @IBAction func selectSegmentAction(sender: AnyObject) {
        resetAndLoading()
        loadQuery()
    }
    
    @IBAction func tapCommentButtonAction(sender: UIButton) {
        // Êäº„Åï„Çå„Åü„Éú„Çø„É≥„ÇíÂèñÂæó
        let cell = sender.superview?.superview as! TimelineCell
        let row = tableView.indexPathForCell(cell)?.row
        selectedPostObject = self.posts[row!] as! NCMBObject
        
        performSegueWithIdentifier("toPostDetailVC", sender: true)
    }
    
    @IBAction func tapLikeButtonAction(sender: AnyObject) {
        print("LIKE„Éú„Çø„É≥Êäº„Åó„Åü")
        let button = sender as! UIButton
        let cell = button.superview?.superview as! TimelineCell
        print("ÊäïÁ®øÂÜÖÂÆπ", cell.postTextLabel.text)
        let row = tableView.indexPathForCell(cell)?.row
        let postData = posts[row!] as! NCMBObject
        
        //„ÅÑ„ÅÑ„Å≠„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å
        if cell.isLikeToggle == true{
            disLike(postData, cell: cell)
        } else {
            like(postData, cell: cell)
        }
    }

    func like(postData: NCMBObject, cell: TimelineCell) {
        //„ÅÑ„ÅÑ„Å≠ON„Éú„Çø„É≥
        cell.likeButton.enabled = false
        cell.likeButton.setImage(likeOnImage, forState: .Normal)
        
        if cell.likeCounts != nil{
            //likeCount„ÅåËøΩÂä†„ÅßÂ§âÊõ¥„Åï„Çå„ÇãÊôÇÔºà2ÂõûÁõÆ‰ª•ÈôçÔºâ
            if let oldLinkCounts = Int(cell.likeNumberButton.currentTitle!){
                print("oldLinkCounts", oldLinkCounts)
                //ÊôÆÈÄö„Å´„ÅÑ„ÅÑ„Å≠„ÇíÔºëËøΩÂä†Ôºà2~Ôºâ
                let newLikeCounts = oldLinkCounts + 1
                cell.likeNumberButton.setTitle(String(newLikeCounts), forState: .Normal)
            }else {
                //oldCount„Åå„Å™„ÅÑÂ†¥ÂêàÔºà‰ª•Ââç„ÅÑ„ÅÑ„Å≠„Åï„Çå„Åü„Åë„Å©„ÄÅÂâäÈô§„Åï„Çå„Å¶0„Å´„Å™„Å£„Å¶likeCount„Åånull„ÅÆÂ†¥ÂêàÔºâ
                let newLikeCounts = 1
                cell.likeNumberButton.setTitle(String(newLikeCounts), forState: .Normal)
            }
        }else{
            //likeCount„ÅåÂàù„ÇÅ„Å¶Â§âÊõ¥„Åï„Çå„ÇãÊôÇ
            let newLikeCounts = 1
            cell.likeNumberButton.setTitle(String(newLikeCounts), forState: .Normal)
        }
        postData.addUniqueObject(NCMBUser.currentUser().objectId, forKey: "likeUser")
        postData.saveEventually ({ (error) -> Void in
            if let error = error{
                print(error.localizedDescription)
                cell.isLikeToggle = false
                cell.likeButton.enabled = true
            }else {
                print("saveÊàêÂäü „ÅÑ„ÅÑ„Å≠‰øùÂ≠ò")
                cell.isLikeToggle = true
                //„ÅÑ„ÅÑ„Å≠„Åó„Åü„Åì„Å®„ÇíÈÄöÁü•ÁîªÈù¢„ÅÆDB„Å´‰øùÂ≠ò
                let auther = postData.objectForKey("user") as! NCMBUser
                let allPostText = postData.objectForKey("text") as! String
                let allPostTextCount = allPostText.characters.count
                print("allPostTextCount", allPostTextCount)
                let postHeader: String?
                if allPostTextCount > 100{
                    postHeader = allPostText.substringToIndex(allPostText.startIndex.advancedBy(100))
                }else {
                    postHeader = allPostText
                }
                print("Notificatoin„Å´‰øùÂ≠ò„Åô„ÇãÊúÄÂàù„ÅÆÔºïÔºêÊñáÂ≠ó", postHeader!)
                let notificationManager = NotificationManager()
                notificationManager.likeNotification(auther, post: postData, postHeader: postHeader!, button: cell.likeButton)
            }
        })
    }

    func disLike(postData: NCMBObject, cell: TimelineCell) {
        //„ÅÑ„ÅÑ„Å≠OFF„Éú„Çø„É≥
        cell.likeButton.enabled = false
        cell.likeButton.setImage(likeOffImage, forState: .Normal)
        cell.likeNumberButton.setTitleColor(UIColor.lightGrayColor(), forState: .Normal)
        
        if cell.likeCounts != nil{
            //likeCount„Åå„ÅÇ„ÇãÊôÇÔºà1~Ôºâ
            let oldLinkCounts = Int(cell.likeNumberButton.currentTitle!)
            print("oldLinkCounts", oldLinkCounts)
            let newLikeCounts = oldLinkCounts! - 1
            if newLikeCounts > 0{
                //Â§âÊõ¥Âæå„ÅÆlikeCount„Åå0„Çà„Çä‰∏ä„ÅÆÂ†¥ÂêàÔºà1~Ôºâ
                cell.likeNumberButton.setTitle(String(newLikeCounts), forState: .Normal)
            }else {
                //Â§âÊõ¥Âæå„ÅÆlikeCount„Åå0„ÇíÂê´„ÇÄ„Åù„Çå‰ª•‰∏ã„ÅÆÂ†¥Âêà(~0)
                let newLikeCounts = ""
                cell.likeNumberButton.setTitle(String(newLikeCounts), forState: .Normal)
            }
        }else {
            //likeCount„Åå‰ªä„Åæ„Åß„Å§„ÅÑ„Åü„Åì„Å®„Åå„Å™„Åã„Å£„ÅüÂ†¥Âêà
            let newLikeCounts = ""
            cell.likeNumberButton.setTitle(String(newLikeCounts), forState: .Normal)
        }
        
        let auther = postData.objectForKey("user") as! NCMBUser
        postData.removeObject(NCMBUser.currentUser().objectId, forKey: "likeUser")
        postData.saveEventually ({ (error) -> Void in
            if let error = error{
                print(error.localizedDescription)
                cell.isLikeToggle = true
                cell.likeButton.enabled = true
            }else {
                print("saveÊàêÂäü „ÅÑ„ÅÑ„Å≠Âèñ„ÇäÊ∂à„Åó")
                cell.isLikeToggle = false
                let notificationManager = NotificationManager()
                notificationManager.deletelikeNotification(auther, post: postData, button: cell.likeButton)
            }
        })
    }
    
    func postDetailDismissionAction() {
        print("postDetailDismissionAction")
        tableView.reloadData()
    }
}

extension LooKBackViewController: DZNEmptyDataSetSource, DZNEmptyDataSetDelegate{
    //------------------DZNEmptyDataSet(„Çª„É´„ÅåÁÑ°„ÅÑÊôÇ„Å´Ë°®Á§∫„Åô„ÇãView„ÅÆË®≠ÂÆö--------------------
    func titleForEmptyDataSet(scrollView: UIScrollView!) -> NSAttributedString! {
        if self.dayLoadingToggle == true {
            let str = "üí® „Çø„Ç§„É†„Éà„É™„ÉÉ„Éó‰∏≠ üí®"
            let attrs = [NSFontAttributeName: UIFont.preferredFontForTextStyle(UIFontTextStyleHeadline) , NSForegroundColorAttributeName:  UIColor.whiteColor()]
            return NSAttributedString(string: str, attributes: attrs)
        }else {
            let str = "üò™ „Åù„ÅÆÊó•„ÅÆ„É≠„Ç∞„ÅØ„Å™„Åã„Å£„Åü„Çà üò™"
            let attrs = [NSFontAttributeName: UIFont.preferredFontForTextStyle(UIFontTextStyleHeadline), NSForegroundColorAttributeName: UIColor.whiteColor()]
            return NSAttributedString(string: str, attributes: attrs)
        }
    }

    func descriptionForEmptyDataSet(scrollView: UIScrollView!) -> NSAttributedString! {
        if self.dayLoadingToggle == true {
            let str = "„Å°„Çá„Å£„Å®„Åæ„Å£„Å¶„Å≠..."
            let attrs = [NSFontAttributeName: UIFont.preferredFontForTextStyle(UIFontTextStyleBody), NSForegroundColorAttributeName: UIColor.whiteColor()]
            return NSAttributedString(string: str, attributes: attrs)
        }else {
            let str = "„Éâ„É≥„Éû„Ç§!!"
            let attrs = [NSFontAttributeName: UIFont.preferredFontForTextStyle(UIFontTextStyleBody), NSForegroundColorAttributeName: UIColor.whiteColor()]
            return NSAttributedString(string: str, attributes: attrs)
        }
    }

    func backgroundColorForEmptyDataSet(scrollView: UIScrollView!) -> UIColor! {
        return UIColor.lightGrayColor()
    }

    func emptyDataSetShouldDisplay(scrollView: UIScrollView!) -> Bool {
        return true
    }

    func emptyDataSetShouldAllowTouch(scrollView: UIScrollView!) -> Bool {
        return false
    }

    func emptyDataSetShouldAllowScroll(scrollView: UIScrollView!) -> Bool {
        return false
    }

    func emptyDataSetShouldAnimateImageView(scrollView: UIScrollView!) -> Bool {
        return false
    }

}

extension LooKBackViewController: UITableViewDelegate, UITableViewDataSource, TTTAttributedLabelDelegate {

    func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView()
        view.backgroundColor = UIColor.whiteColor()
        let label = UILabel(frame: CGRectMake(0, 0, tableView.frame.width, 50))
        label.textColor = ColorManager.sharedSingleton.mainColor()
//        label.font = UIFont.boldSystemFontOfSize(24)
        label.font = UIFont(name: "AppleSDGothicNeo-Bold", size: 24)
        label.textAlignment = NSTextAlignment.Center

        var agoDayTitle: String?
        let dayTitleManager = LookBackDayTitleManager()

        switch segment.selectedSegmentIndex {
        case 0:
            agoDayTitle = "üöÅ " + dayTitleManager.getWeekAgoDayTitle(NSDate(), agoInt: 1) + " üöÅ"
            break

        case 1:
            agoDayTitle =  "‚úàÔ∏è " + dayTitleManager.getMonthAgoDayTitle(NSDate(), agoInt: 1) + " ‚úàÔ∏è"
            break

        case 2:
            agoDayTitle = "üöÄ " + dayTitleManager.getYearAgoDayTitle(NSDate(), agoInt: 1) + " üöÄ"
            break

        default:
            break
        }

        label.text = agoDayTitle
        view.addSubview(label)

        return view
    }

    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return posts.count
    }
    
    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
        let cellId = "TimelineCell"
        let cell = tableView.dequeueReusableCellWithIdentifier(cellId, forIndexPath: indexPath) as! TimelineCell
        
        //ImageView„ÅÆÂàùÊúüÂåñÁöÑ„Å™
        cell.userProfileImageView.image = UIImage(named: "noprofile")
        cell.postImageView.image = nil
        
        // ÂêÑÂÄ§„Çí„Çª„É´„Å´ÂÖ•„Çå„Çã
        let postData = posts[indexPath.row] as! NCMBObject
        print("postData", postData)

        //userNameLabel
        //userProfileImageView
        cell.userProfileImageView.layer.cornerRadius = cell.userProfileImageView.frame.width/2
        if let author = postData.objectForKey("user") as? NCMBUser {
            cell.userNameLabel.text = author.objectForKey("userFaceName") as? String
            if let profileImageName = author.objectForKey("userProfileImage") as? String{
                let profileImageFile = NCMBFile.fileWithName(profileImageName, data: nil) as! NCMBFile
                SDWebImageManager.sharedManager().imageCache.queryDiskCacheForKey(profileImageFile.name, done: { (image, SDImageCacheType) in
                    if let image = image {
                        cell.userProfileImageView.image = image
                    }else {
                        profileImageFile.getDataInBackgroundWithBlock({ (imageData: NSData?, error: NSError!) -> Void in
                            if let error = error {
                                print("profileImage„ÅÆÂèñÂæóÂ§±ÊïóÔºö ", error)
                                cell.userProfileImageView.image = UIImage(named: "noprofile")
                            } else {
                                cell.userProfileImageView.image = UIImage(data: imageData!)
                                SDWebImageManager.sharedManager().imageCache.storeImage(UIImage(data: imageData!), forKey: profileImageFile.name)
                            }
                        })
                    }
                })
            }else {
                cell.userProfileImageView.image = UIImage(named: "noprofile")
            }
        } else {
            cell.userNameLabel.text = "username"
            cell.userProfileImageView.image = UIImage(named: "noprofile")
        }





//        //„Éó„É≠„Éï„Ç£„Éº„É´ÂÜôÁúü„ÅÆÂΩ¢„ÇíÂÜÜÂΩ¢„Å´„Åô„Çã
//        cell.userProfileImageView.layer.cornerRadius = cell.userProfileImageView.frame.width/2
//        let author = postData.objectForKey("user") as? NCMBUser
//        if let author = author {
//            cell.userNameLabel.text = author.objectForKey("userFaceName") as? String
//
//            //‰∏ÄÂ∫¶„É≠„Éº„Éâ„Åó„Åü„ÅãÔºü
//            print("indexPath.row", indexPath.row)
//            if let cashProfileImage = cashProfileImageDictionary[indexPath.row] {
//                cell.userProfileImageView.image = cashProfileImage
//            }else {
//                let postImageData = NCMBFile.fileWithName(author.objectForKey("userProfileImage") as? String, data: nil) as! NCMBFile
//                postImageData.getDataInBackgroundWithBlock({ (imageData: NSData?, error: NSError!) -> Void in
//                    if let error = error {
//                        print("„Éó„É≠„Éï„Ç£„Éº„É´ÁîªÂÉè„ÅÆÂèñÂæóÂ§±ÊïóÔºö ", error)
//                        cell.userProfileImageView.image = UIImage(named: "noprofile")
//                    } else {
//                        cell.userProfileImageView.image = UIImage(data: imageData!)
//                        print("(before)indexPath -> cashProfileImageDictionary", indexPath.row, "->", self.cashProfileImageDictionary)
//                        self.cashProfileImageDictionary[indexPath.row] = UIImage(data: imageData!)
//                        print("(after)indexPath -> cashProfileImageDictionary", indexPath.row, "->", self.cashProfileImageDictionary)
//
//                    }
//                })
//            }
//        } else {
//            cell.userNameLabel.text = "username"
//            cell.userProfileImageView.image = UIImage(named: "noprofile")
//        }

        // postTextLabel
        cell.postTextLabel.delegate = self
        // url„Çí„É™„É≥„ÇØ„Å´„Åô„ÇãË®≠ÂÆö
        let linkColor = ColorManager.sharedSingleton.mainColor()
        let linkActiveColor = ColorManager.sharedSingleton.mainColor().darken(0.25)
        cell.postTextLabel.linkAttributes = [kCTForegroundColorAttributeName : linkColor]
        cell.postTextLabel.activeLinkAttributes = [kCTForegroundColorAttributeName : linkActiveColor]
        cell.postTextLabel.enabledTextCheckingTypes = NSTextCheckingType.Link.rawValue
        cell.postTextLabel.text = postData.objectForKey("text") as? String

        // postDateLabel
        let date = postData.objectForKey("postDate") as? NSDate
        print("NSDate„ÅÆÂÜÖÂÆπ", date)
        let postDateFormatter: NSDateFormatter = NSDateFormatter()
        postDateFormatter.dateFormat = "yyyy/MM/dd HH:mm"
        cell.postDateLabel.text = postDateFormatter.stringFromDate(date!)

        //commentButton
        cell.commentButton.addTarget(self, action: #selector(LooKBackViewController.tapCommentButtonAction(_:)), forControlEvents: .TouchUpInside)

        //postImageView
        cell.postImageView.image = nil
        if let postImageName = postData.objectForKey("image1") as? String {
            cell.imageViewHeightConstraint.constant = 150.0
//            cell.postImageView.layer.cornerRadius = 5.0
            let postImageFile = NCMBFile.fileWithName(postImageName, data: nil) as! NCMBFile
            SDWebImageManager.sharedManager().imageCache.queryDiskCacheForKey(postImageFile.name, done: { (image, SDImageCacheType) in
                if let image = image {
                    cell.postImageView.image = image
                }else {
                    postImageFile.getDataInBackgroundWithBlock({ (imageData: NSData?, error: NSError!) -> Void in
                        if let error = error {
                            print("postImage„ÅÆÂèñÂæóÂ§±ÊïóÔºö ", error)
                        } else {
                            cell.postImageView.image = UIImage(data: imageData!)
                            SDWebImageManager.sharedManager().imageCache.storeImage(UIImage(data: imageData!), forKey: postImageFile.name)
                        }
                    })
                }
            })
        } else {
            cell.postImageView.image = nil
            cell.imageViewHeightConstraint.constant = 0.0
        }

        //„ÅÑ„ÅÑ„Å≠
        if postData.objectForKey("likeUser") != nil{
            //‰ªä„Åæ„Åß„Åß„ÄÅÊ∂à„Åï„Çå„Åü„Åã„ÇÇ„Å†„Åë„Å©„ÄÅÂøÖ„Åö„ÅÑ„ÅÑ„Å≠„Åï„Çå„Åü„Åì„Å®„ÅØ„ÅÇ„Çã
            let postLikeUserString = postData.objectForKey("likeUser")
            //String„ÇíNSArray„Å´Â§âÊèõ
            let postLikeUserArray = postLikeUserString as! NSArray
            let postLikeUserCount = postLikeUserArray.count
            if postLikeUserCount > 0 {
                //„ÅÑ„ÅÑ„Å≠„Çí„Åó„Åü„É¶„Éº„Ç∂„Éº„ÅåÔºë‰∫∫‰ª•‰∏ä„ÅÑ„Çã
                cell.likeCounts = postLikeUserCount
                if postLikeUserArray.containsObject(NCMBUser.currentUser().objectId) == true{
                    //Ëá™ÂàÜ„Åå„ÅÑ„ÅÑ„Å≠„Åó„Å¶„ÅÑ„Çã
                    print("ÁßÅ„ÅØ„Åô„Åß„Å´„ÅÑ„ÅÑ„Å≠„Çí„Åä„Åó„Å¶„ÅÑ„Çã")
                    cell.likeButton.setImage(likeOnImage, forState: .Normal)
                    cell.likeNumberButton.setTitle(String(cell.likeCounts!), forState: .Normal)
                    cell.isLikeToggle = true
                }else{
                    //„ÅÑ„ÅÑ„Å≠„ÅØ„ÅÇ„Çã„Åë„Å©„ÄÅËá™ÂàÜ„Åå„ÅÑ„ÅÑ„Å≠„Åó„Å¶„ÅÑ„Å™„ÅÑ
                    cell.likeButton.setImage(likeOffImage, forState: .Normal)
                    cell.likeNumberButton.setTitle(String(cell.likeCounts!), forState: .Normal)
                }
            }else{
                //„ÅÑ„ÅÑ„Å≠„Åó„Åü„É¶„Éº„Ç∂„Éº„ÅØ„ÅÑ„Å™„ÅÑ
                cell.likeButton.setImage(likeOffImage, forState: .Normal)
                cell.likeNumberButton.setTitle("", forState: .Normal)
            }
        }else{
            //‰ªä„Åæ„Åß‰∏ÄÂ∫¶„ÇÇ„ÅÑ„ÅÑ„Å≠„Åï„Çå„Åü„Åì„Å®„ÅØ„Å™„ÅÑ
            cell.likeButton.setImage(likeOffImage, forState: .Normal)
            cell.likeNumberButton.setTitle("", forState: .Normal)
        }
        return cell
    }
    
    func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
        print("„Çª„É´„ÅÆÈÅ∏Êäû: \(indexPath.row)")
        selectedPostObject = self.posts[indexPath.row] as! NCMBObject
        performSegueWithIdentifier("toPostDetailVC", sender: nil)
    }

//     url„É™„É≥„ÇØ„Çí„Çø„ÉÉ„Éó„Åï„Çå„Åü„Å®„Åç„ÅÆÂá¶ÁêÜ„ÇíË®òËø∞„Åó„Åæ„Åô
    func attributedLabel(label: TTTAttributedLabel!, didSelectLinkWithURL url: NSURL!)
    {
        print(url)
        if UIApplication.sharedApplication().canOpenURL(url!){
            UIApplication.sharedApplication().openURL(url!)
        }
    }
    
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if segue.identifier == "toPostDetailVC" {
            let postDetailVC: PostDetailViewController = segue.destinationViewController as! PostDetailViewController
            //            postDetailVC.hidesBottomBarWhenPushed = true // true„Å™„ÇâtabBarÈö†„Åô
            postDetailVC.postObject = self.selectedPostObject
            if let selectedPostImage = selectedPostImage {
                postDetailVC.postImage = selectedPostImage
            }
            postDetailVC.delegate = self
            if let sender = sender {
                postDetailVC.isSelectedCommentButton = sender as! Bool
            }
        }
    }
}

